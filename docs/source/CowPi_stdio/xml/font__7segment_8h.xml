<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="font__7segment_8h" kind="file" language="C++">
    <compoundname>font_7segment.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="fonts_8c" local="yes">src/fonts/fonts.c</includedby>
    <includedby refid="fonts_8h" local="yes">src/fonts/fonts.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/fonts/font_7segment.h</label>
        <link refid="font__7segment_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/CowPi_stdio.h</label>
        <link refid="_cow_pi__stdio_8h"/>
      </node>
      <node id="5">
        <label>src/file_streams/max7219_streams.c</label>
        <link refid="max7219__streams_8c"/>
      </node>
      <node id="6">
        <label>src/file_streams/morse_code_streams.c</label>
        <link refid="morse__code__streams_8c"/>
      </node>
      <node id="1">
        <label>src/fonts/font_7segment.h</label>
        <link refid="font__7segment_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/fonts/fonts.c</label>
        <link refid="fonts_8c"/>
      </node>
      <node id="3">
        <label>src/fonts/fonts.h</label>
        <link refid="fonts_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="font__7segment_8h_1af3e0e343bc6b8fc3eae5c269ce9ccd43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t cowpi_font_ascii_to_7segment</definition>
        <argsstring>(char c)</argsstring>
        <name>cowpi_font_ascii_to_7segment</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Provides the 7-segment bit vector for an ASCII character or for a hexadecimal numeral. </para>
        </briefdescription>
        <detaileddescription>
<para>For hexadecimal numerals 0x0-0xF, returns a bit vector to display that numeral on a 7-segment display. For the printable ASCII characters 0x20-0x7E, returns a bit vector to display an approximation of that character on a 7-segment display. Values in the range 0x10-0x1F, and 0x7F (DEL) return 0xFF, which will illuminate all segments.</para>
<para>The bit vector is guaranteed to work for a 7-segment display whose segments are mapped to bits in the manner specified in the MAX7219/MAX7221 datasheet (MSB DP-A-B-C-D-E-F-G LSB).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII character whose 7-segment bit vector is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 7-segment bit vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_7segment.h" line="71" column="9" bodyfile="src/fonts/fonts.c" bodystart="43" bodyend="49" declfile="src/fonts/font_7segment.h" declline="71" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="font__7segment_8h_1a961311a015eda71844339d0247941c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * cowpi_font_string_to_7segment</definition>
        <argsstring>(uint8_t *destination, const char *s)</argsstring>
        <name>cowpi_font_string_to_7segment</name>
        <param>
          <type>uint8_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Provides an array of 7-segment bit vectors for an ASCII character string. </para>
        </briefdescription>
        <detaileddescription>
<para>The source string, <computeroutput>s</computeroutput>, is assumed to be NUL-terminated.</para>
<para>The <computeroutput>destination</computeroutput> array is assumed to point to a block of memory with <computeroutput>strlen(s)</computeroutput> bytes allocated; that is, it must have enough space to hold the array of bit vectors.</para>
<para><simplesect kind="note"><para>The array of bit vectors will <emphasis>not</emphasis> be NUL-terminated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>an empty array of sufficient size to hold the bit vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be converted into 7-segment bit vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>destination</computeroutput>, with the requested bit vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_7segment.h" line="90" column="9" bodyfile="src/fonts/fonts.c" bodystart="51" bodyend="57" declfile="src/fonts/font_7segment.h" declline="90" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a font to display approximations of printable ASCII characters on 7-segment displays. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Christopher A. Bohn</para>
</simplesect>
</para>
<para>The mapping of bits to segment lines is: <programlisting><codeline><highlight class="normal"><sp/>--A--</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">F<sp/><sp/><sp/><sp/><sp/>B</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/><sp/><sp/><sp/><sp/><sp/>7<sp/>6<sp/>5<sp/>4<sp/>3<sp/>2<sp/>1<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/>--G--<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/><sp/><sp/><sp/><sp/>DP<sp/>A<sp/>B<sp/>C<sp/>D<sp/>E<sp/>F<sp/>G</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">E<sp/><sp/><sp/><sp/><sp/>C</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/>--D--<sp/><sp/><sp/>(DP)</highlight></codeline>
</programlisting> If your display follows the same mapping, you can use the functions&apos; outputs directly. If the endianness of segments A-G are the same but your decimal point is bit 0, then you can left-shift the functions&apos; outputs by 1 and only certain punctuation characters will be improperly displayed. If the mapping is any further off, then you will likely not be able to use these functions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi_stdio<sp/>(c)<sp/>2022-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COWPI_STDIO_FONT_7SEGMENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_STDIO_FONT_7SEGMENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">uint8_t<sp/><ref refid="font__7segment_8h_1af3e0e343bc6b8fc3eae5c269ce9ccd43" kindref="member">cowpi_font_ascii_to_7segment</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">uint8_t<sp/>*<ref refid="font__7segment_8h_1a961311a015eda71844339d0247941c1a" kindref="member">cowpi_font_string_to_7segment</ref>(uint8_t<sp/>*destination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//COWPI_STDIO_FONT_7SEGMENT_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/fonts/font_7segment.h"/>
  </compounddef>
</doxygen>
