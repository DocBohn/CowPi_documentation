<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="font__dotmatrix_8h" kind="file" language="C++">
    <compoundname>font_dotmatrix.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="fonts_8c" local="yes">src/fonts/fonts.c</includedby>
    <includedby refid="fonts_8h" local="yes">src/fonts/fonts.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/fonts/font_dotmatrix.h</label>
        <link refid="font__dotmatrix_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/CowPi_stdio.h</label>
        <link refid="_cow_pi__stdio_8h"/>
      </node>
      <node id="5">
        <label>src/file_streams/max7219_streams.c</label>
        <link refid="max7219__streams_8c"/>
      </node>
      <node id="6">
        <label>src/file_streams/morse_code_streams.c</label>
        <link refid="morse__code__streams_8c"/>
      </node>
      <node id="1">
        <label>src/fonts/font_dotmatrix.h</label>
        <link refid="font__dotmatrix_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/fonts/fonts.c</label>
        <link refid="fonts_8c"/>
      </node>
      <node id="3">
        <label>src/fonts/fonts.h</label>
        <link refid="fonts_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="font__dotmatrix_8h_1ad1402c894475056760e935559eea4756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t cowpi_font_get_dotmatrix_width</definition>
        <argsstring>(char c)</argsstring>
        <name>cowpi_font_get_dotmatrix_width</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Provides the minimum number of columns needed to represent a character in the dot matrix font. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the character whose width is to be determined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the dot matrix width of the character </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="47" column="8" bodyfile="src/fonts/fonts.c" bodystart="61" bodyend="67" declfile="src/fonts/font_dotmatrix.h" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="font__dotmatrix_8h_1a2540146dfc7fae258609b0180b92ddaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * cowpi_font_ascii_to_narrow_dotmatrix</definition>
        <argsstring>(uint8_t *destination, char c)</argsstring>
        <name>cowpi_font_ascii_to_narrow_dotmatrix</name>
        <param>
          <type>uint8_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Provides the dot matrix representation of an ASCII character with no blank columns to the right of the character. </para>
        </briefdescription>
        <detaileddescription>
<para>Each byte of the destination array stores one row of the character&apos;s dot matrix representation, with element 0 being the top of the character. Each bit position in an array element represents a column.</para>
<para>The <computeroutput>destination</computeroutput> array is assumed to point to a block of memory with 8 bytes allocated; that is, it must have enough space to hold the character&apos;s dot matrix representation.</para>
<para><simplesect kind="see"><para><ref refid="font__dotmatrix_8h_1a9837280ea0856025839af606efaf8fac" kindref="member">cowpi_font_ascii_to_5wide_dotmatrix</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="font__dotmatrix_8h_1a6ce3c98c676cc39fbb50e9aa72475189" kindref="member">cowpi_font_ascii_to_8wide_dotmatrix</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>an empty 8-byte array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII character whose dot matrix representation is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>destination</computeroutput>, with the requested dot matrix character </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="69" column="9" bodyfile="src/fonts/fonts.c" bodystart="69" bodyend="76" declfile="src/fonts/font_dotmatrix.h" declline="69" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="font__dotmatrix_8h_1a9837280ea0856025839af606efaf8fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * cowpi_font_ascii_to_5wide_dotmatrix</definition>
        <argsstring>(uint8_t *destination, char c)</argsstring>
        <name>cowpi_font_ascii_to_5wide_dotmatrix</name>
        <param>
          <type>uint8_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Provides the dot matrix representation of an ASCII character centered horizontally in the five columns used for a 5x8 dot matrix character (the five right-most columns of the 8x8 matrix). </para>
        </briefdescription>
        <detaileddescription>
<para>Each byte of the destination array stores one row of the character&apos;s dot matrix representation, with element 0 being the top of the character.</para>
<para>The <computeroutput>destination</computeroutput> array is assumed to point to a block of memory with 8 bytes allocated; that is, it must have enough space to hold the character&apos;s dot matrix representation.</para>
<para><simplesect kind="see"><para><ref refid="font__dotmatrix_8h_1a2540146dfc7fae258609b0180b92ddaf" kindref="member">cowpi_font_ascii_to_narrow_dotmatrix</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="font__dotmatrix_8h_1a6ce3c98c676cc39fbb50e9aa72475189" kindref="member">cowpi_font_ascii_to_8wide_dotmatrix</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>an empty 8-byte array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII character whose dot matrix representation is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>destination</computeroutput>, with the requested dot matrix character </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="91" column="9" bodyfile="src/fonts/fonts.c" bodystart="78" bodyend="84" declfile="src/fonts/font_dotmatrix.h" declline="91" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="font__dotmatrix_8h_1a6ce3c98c676cc39fbb50e9aa72475189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * cowpi_font_ascii_to_8wide_dotmatrix</definition>
        <argsstring>(uint8_t *destination, char c)</argsstring>
        <name>cowpi_font_ascii_to_8wide_dotmatrix</name>
        <param>
          <type>uint8_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Provides the dot matrix representation of an ASCII character centered horizontally in the eight columns of the 8x8 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Each byte of the destination array stores one row of the character&apos;s dot matrix representation, with element 0 being the top of the character.</para>
<para>The <computeroutput>destination</computeroutput> array is assumed to point to a block of memory with 8 bytes allocated; that is, it must have enough space to hold the character&apos;s dot matrix representation.</para>
<para><simplesect kind="see"><para><ref refid="font__dotmatrix_8h_1a2540146dfc7fae258609b0180b92ddaf" kindref="member">cowpi_font_ascii_to_narrow_dotmatrix</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="font__dotmatrix_8h_1a9837280ea0856025839af606efaf8fac" kindref="member">cowpi_font_ascii_to_5wide_dotmatrix</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>an empty 8-byte array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII character whose dot matrix representation is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>destination</computeroutput>, with the requested dot matrix character </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="112" column="9" bodyfile="src/fonts/fonts.c" bodystart="86" bodyend="92" declfile="src/fonts/font_dotmatrix.h" declline="112" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="font__dotmatrix_8h_1a9cd394cdd812539e35d3967e4735a7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * cowpi_font_transpose_dotmatrix</definition>
        <argsstring>(uint8_t *matrix)</argsstring>
        <name>cowpi_font_transpose_dotmatrix</name>
        <param>
          <type>uint8_t *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Transposes an 8x8 dot matrix representation. </para>
        </briefdescription>
        <detaileddescription>
<para>After the transposition, each element of the <computeroutput>matrix</computeroutput> array represents a column, and each bit position of an array element represents a row.</para>
<para>This is an in-place transposition; that is, the original matrix is overwritten.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the dot matrix to be transposed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> after the transposition </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="126" column="9" bodyfile="src/fonts/fonts.c" bodystart="94" bodyend="108" declfile="src/fonts/font_dotmatrix.h" declline="126" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="font__dotmatrix_8h_1a9536ecd91698c7a43aa8c28dd7556836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cowpi_font_string_to_horizontal_dotmatrix</definition>
        <argsstring>(uint8_t *destination, const char *s, bool kerned)</argsstring>
        <name>cowpi_font_string_to_horizontal_dotmatrix</name>
        <param>
          <type>uint8_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>kerned</declname>
        </param>
        <briefdescription>
<para>Provides a single dot matrix representation of an ASCII character string suitable for scrolling horizontally. </para>
        </briefdescription>
        <detaileddescription>
<para>Each byte of the destination array stores one column of the string&apos;s dot matrix representation, with element 0 being the leftmost column of the first character.</para>
<para>The <computeroutput>destination</computeroutput> array is assumed to point to a block of memory with sufficient space allocated to hold the full string&apos;s dot matrix representation; <computeroutput>6 * strlen(s)</computeroutput> is guaranteed to be sufficient.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>an empty array to hold the dot matrix representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII string whose dot matrix representation is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kerned</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether to use minimal space between characters or to use a fixed 5 columns per character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of columns in the string&apos;s dot matrix representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="148" column="5" bodyfile="src/fonts/fonts.c" bodystart="110" bodyend="141" declfile="src/fonts/font_dotmatrix.h" declline="148" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="font__dotmatrix_8h_1a54a586042e47b1a9551f72ecd2276e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cowpi_font_string_to_vertical_dotmatrix</definition>
        <argsstring>(uint8_t *destination, const char *s, bool kerned)</argsstring>
        <name>cowpi_font_string_to_vertical_dotmatrix</name>
        <param>
          <type>uint8_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>kerned</declname>
        </param>
        <briefdescription>
<para>Provides a single dot matrix representation of an ASCII character string suitable for scrolling vertically. </para>
        </briefdescription>
        <detaileddescription>
<para>Each byte of the destination array stores one row of the string&apos;s dot matrix representation, with element 0 being the top row of the first character.</para>
<para>The <computeroutput>destination</computeroutput> array is assumed to point to a block of memory with sufficient space allocated to hold the full string&apos;s dot matrix representation; <computeroutput>9 * strlen(s)</computeroutput> is guaranteed to be sufficient.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>an empty array to hold the dot matrix representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII string whose dot matrix representation is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kerned</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether to use minimal space between characters or to use a fixed 8 rows per character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of rows in the string&apos;s dot matrix representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fonts/font_dotmatrix.h" line="169" column="5" bodyfile="src/fonts/fonts.c" bodystart="143" bodyend="169" declfile="src/fonts/font_dotmatrix.h" declline="169" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a font to display printable ASCII characters on dot-matrix displays. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Christopher A. Bohn</para>
</simplesect>
</para>
<para>All characters are guaranteed to occupy a rectangle no greater than 8 rows by 5 columns. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi_stdio<sp/>(c)<sp/>2022-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COWPI_STDIO_FONT_DOTMATRIX_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_STDIO_FONT_DOTMATRIX_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">int8_t<sp/><ref refid="font__dotmatrix_8h_1ad1402c894475056760e935559eea4756" kindref="member">cowpi_font_get_dotmatrix_width</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">uint8_t<sp/>*<ref refid="font__dotmatrix_8h_1a2540146dfc7fae258609b0180b92ddaf" kindref="member">cowpi_font_ascii_to_narrow_dotmatrix</ref>(uint8_t<sp/>*destination,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">uint8_t<sp/>*<ref refid="font__dotmatrix_8h_1a9837280ea0856025839af606efaf8fac" kindref="member">cowpi_font_ascii_to_5wide_dotmatrix</ref>(uint8_t<sp/>*destination,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">uint8_t<sp/>*<ref refid="font__dotmatrix_8h_1a6ce3c98c676cc39fbb50e9aa72475189" kindref="member">cowpi_font_ascii_to_8wide_dotmatrix</ref>(uint8_t<sp/>*destination,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">uint8_t<sp/>*<ref refid="font__dotmatrix_8h_1a9cd394cdd812539e35d3967e4735a7cf" kindref="member">cowpi_font_transpose_dotmatrix</ref>(uint8_t<sp/>*matrix);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="font__dotmatrix_8h_1a9536ecd91698c7a43aa8c28dd7556836" kindref="member">cowpi_font_string_to_horizontal_dotmatrix</ref>(uint8_t<sp/>*destination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kerned);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="font__dotmatrix_8h_1a54a586042e47b1a9551f72ecd2276e2d" kindref="member">cowpi_font_string_to_vertical_dotmatrix</ref>(uint8_t<sp/>*destination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kerned);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//COWPI_STDIO_FONT_DOTMATRIX_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/fonts/font_dotmatrix.h"/>
  </compounddef>
</doxygen>
