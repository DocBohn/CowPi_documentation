<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="i2c_8h" kind="file" language="C++">
    <compoundname>i2c.h</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes refid="communication_8h" local="yes">communication.h</includes>
    <includedby refid="i2c_8c" local="yes">src/communication/i2c.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>communication.h</label>
        <link refid="communication_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/communication/i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../typedefs.h</label>
        <link refid="typedefs_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Arduino.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/communication/i2c.c</label>
        <link refid="i2c_8c"/>
      </node>
      <node id="1">
        <label>src/communication/i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="i2c_8h_1a6bf11c5a94e8e9e73e5913d58c7262e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_initialize_bitbang</definition>
        <argsstring>(const cowpi_display_module_protocol_t *configuration)</argsstring>
        <name>cowpi_i2c_initialize_bitbang</name>
        <param>
          <type>const <ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref> *</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize()</ref> that supports <ref refid="i2c_8h_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the microcontroller pins, adapter mapping, and possibly i2c peripheral address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.h" line="49" column="6" bodyfile="src/communication/i2c.c" bodystart="48" bodyend="64" declfile="src/communication/i2c.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a0919d8883527981ba813ea2159b5699c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_transmit_bitbang</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>cowpi_i2c_transmit_bitbang</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>A bit-banged implementation of <ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.h" line="57" column="6" bodyfile="src/communication/i2c.c" bodystart="66" bodyend="95" declfile="src/communication/i2c.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a98c4937fe7c6a2081736ff0a8419c511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_i2c_finalize_bitbang</definition>
        <argsstring>(void)</argsstring>
        <name>cowpi_i2c_finalize_bitbang</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize()</ref> that supports <ref refid="i2c_8h_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.h" line="63" column="6" bodyfile="src/communication/i2c.c" bodystart="97" bodyend="105" declfile="src/communication/i2c.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1ad8aa166aa700f8f0d52be6eea9b176e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_initialize_hardware</definition>
        <argsstring>(const cowpi_display_module_protocol_t *configuration)</argsstring>
        <name>cowpi_i2c_initialize_hardware</name>
        <param>
          <type>const <ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref> *</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize()</ref> that supports <ref refid="i2c_8h_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the microcontroller pins, adapter mapping, and possibly i2c peripheral address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.h" line="73" column="6" bodyfile="src/communication/i2c.c" bodystart="162" bodyend="164" declfile="src/communication/i2c.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a392256e05988efb8ad36e043c1ffb1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_transmit_hardware</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>cowpi_i2c_transmit_hardware</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit()</ref> that uses the microcontroller&apos;s hardware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.h" line="82" column="6" bodyfile="src/communication/i2c.c" bodystart="166" bodyend="168" declfile="src/communication/i2c.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a82d5ee7a140c7fac38a6a4becc363b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_i2c_finalize_hardware</definition>
        <argsstring>(void)</argsstring>
        <name>cowpi_i2c_finalize_hardware</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize()</ref> that supports <ref refid="i2c_8h_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.h" line="88" column="6" bodyfile="src/communication/i2c.c" bodystart="170" bodyend="172" declfile="src/communication/i2c.h" declline="88" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware-based and software-based implementations of the I2C protocol. </para>
    </briefdescription>
    <detaileddescription>
<para>By default, a software (bit-banged) implementation will be used. When an implementation that uses the microcontroller&apos;s hardware is available, it can be used instead by re-assigning the <ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize()</ref>, <ref refid="communication_8h_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit()</ref>, and <ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize()</ref> function pointers.</para>
<para>The provided implementations are for peripheral-in/controller-out mode. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi_stdio<sp/>(c)<sp/>2022-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COWPI_STDIO_I2C_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_STDIO_I2C_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="communication_8h" kindref="compound">communication.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1ad8aa166aa700f8f0d52be6eea9b176e8" kindref="member">cowpi_i2c_initialize_hardware</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a82d5ee7a140c7fac38a6a4becc363b96" kindref="member">cowpi_i2c_finalize_hardware</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//COWPI_STDIO_I2C_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/communication/i2c.h"/>
  </compounddef>
</doxygen>
