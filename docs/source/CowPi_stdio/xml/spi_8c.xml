<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="spi_8c" kind="file" language="C++">
    <compoundname>spi.c</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes refid="spi_8h" local="yes">spi.h</includes>
    <incdepgraph>
      <node id="4">
        <label>communication.h</label>
        <link refid="communication_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/communication/spi.c</label>
        <link refid="spi_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>spi.h</label>
        <link refid="spi_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>../typedefs.h</label>
        <link refid="typedefs_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Arduino.h</label>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="spi_8c_1a0ca8b37572124ad1df6ae619feaa6305" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t data_pin</definition>
        <argsstring></argsstring>
        <name>data_pin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="28" column="16" bodyfile="src/communication/spi.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="spi_8c_1a77229b3e891eeeabe5b4e83cf3cb31f6" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t clock_pin</definition>
        <argsstring></argsstring>
        <name>clock_pin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="29" column="16" bodyfile="src/communication/spi.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="spi_8c_1a7b730e90ff2c6e46fd35064cabd0ce48" prot="public" static="yes" mutable="no">
        <type><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref></type>
        <definition>bit_order_t data_order</definition>
        <argsstring></argsstring>
        <name>data_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="30" column="20" bodyfile="src/communication/spi.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="spi_8c_1ae56ad6594960d7d4ee6ef6041c200e0a" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* cowpi_spi_initialize) (const cowpi_display_module_protocol_t *configuration, bit_order_t bit_order)</definition>
        <argsstring>)(const cowpi_display_module_protocol_t *configuration, bit_order_t bit_order)</argsstring>
        <name>cowpi_spi_initialize</name>
        <initializer>= <ref refid="spi_8c_1a6ca4b938a71a8321954f5ac045f96970" kindref="member">cowpi_spi_initialize_bitbang</ref></initializer>
        <briefdescription>
<para>Function pointer for function that takes care of any setup needed before using SPI to send data to a display module. </para>
        </briefdescription>
        <detaileddescription>
<para>The particulars of what this setup is depends on the particular SPI implementation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the pins used for SPI </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_order</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether the peripheral expects the byte to arrive LSB first or MSB first</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="32" column="1" bodyfile="src/communication/spi.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="spi_8c_1a8081d2ae373c4f3f0ef9883716d7b5ba" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* cowpi_spi_transmit) (uint8_t byte)</definition>
        <argsstring>)(uint8_t byte)</argsstring>
        <name>cowpi_spi_transmit</name>
        <initializer>= <ref refid="spi_8c_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang</ref></initializer>
        <briefdescription>
<para>Function pointer for function that uses SPI to send data to a display module. </para>
        </briefdescription>
        <detaileddescription>
<para>This might be a pre-defined implementation that uses the microcontroller&apos;s SPI hardware, or it might be a pre-defined bit-bang implementation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="communication_8h_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="35" column="1" bodyfile="src/communication/spi.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="spi_8c_1a50fed624317382ee7f85dd4e50a9d533" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* cowpi_spi_finalize) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>cowpi_spi_finalize</name>
        <initializer>= <ref refid="spi_8c_1ad25b0e5a844b8af779e3db3261b8f35f" kindref="member">cowpi_spi_finalize_bitbang</ref></initializer>
        <briefdescription>
<para>Function pointer for function that takes care of any teardown needed after using SPI to send data to a display module. </para>
        </briefdescription>
        <detaileddescription>
<para>The particulars of what this teardown is depends on the particular SPI implementation.</para>
<para><simplesect kind="see"><para><ref refid="communication_8h_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="37" column="1" bodyfile="src/communication/spi.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="spi_8c_1a487a89c904390ee413a7f74b05a446c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_use_spi_bitbang</definition>
        <argsstring>()</argsstring>
        <name>cowpi_use_spi_bitbang</name>
        <briefdescription>
<para>Assigns to <computeroutput>cowpi_spi_initialize</computeroutput>, <computeroutput>cowpi_spi_transmit</computeroutput>, and <computeroutput>cowpi_spi_finalize</computeroutput> pure software (&quot;bit-banged&quot;) implementations that do not use the microcontroller&apos;s built-in SPI hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>Bit-banged implementations have no restrictions on the choice of data and clock pins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="40" column="6" bodyfile="src/communication/spi.c" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1a6ca4b938a71a8321954f5ac045f96970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_spi_initialize_bitbang</definition>
        <argsstring>(const cowpi_display_module_protocol_t *configuration, bit_order_t bit_order)</argsstring>
        <name>cowpi_spi_initialize_bitbang</name>
        <param>
          <type>const <ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref> *</type>
          <declname>configuration</declname>
        </param>
        <param>
          <type><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref></type>
          <declname>bit_order</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize()</ref> that supports <ref refid="spi_8h_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the pins used for SPI </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_order</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether the peripheral expects the byte to arrive LSB first or MSB first </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="46" column="6" bodyfile="src/communication/spi.c" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1a4a5da23ff494753ca31c403a8d2cf323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_spi_transmit_bitbang</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>cowpi_spi_transmit_bitbang</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>A bit-banged implementation of <ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="52" column="6" bodyfile="src/communication/spi.c" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1ad25b0e5a844b8af779e3db3261b8f35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_spi_finalize_bitbang</definition>
        <argsstring>(void)</argsstring>
        <name>cowpi_spi_finalize_bitbang</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize()</ref> that supports <ref refid="spi_8h_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="56" column="6" bodyfile="src/communication/spi.c" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1a9ccea4bfedcd66e54c74366845193553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_use_spi_hardware</definition>
        <argsstring>()</argsstring>
        <name>cowpi_use_spi_hardware</name>
        <briefdescription>
<para>Assigns to <computeroutput>cowpi_spi_initialize</computeroutput>, <computeroutput>cowpi_spi_transmit</computeroutput>, and <computeroutput>cowpi_spi_finalize</computeroutput> implementations that use the microcontroller&apos;s built-in SPI hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>Using the SPI hardware may limit the choice of data and clock pins. Attempting to use the SPI hardware while specifying pins that cannot be used by the SPI hardware may result in unexpected behavior.</para>
<para>The CowPi_stdio library does not have SPI hardware implementations for all microcontrollers. If a hardware implementation is unavailable, this function will return <computeroutput>false</computeroutput> and will assign a bit-banged implementation instead.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if hardware implementations have been assigned to the CowPi&apos;s SPI function pointers </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if hardware implementations have not been assigned to the CowPi&apos;s SPI function pointers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="86" column="6" bodyfile="src/communication/spi.c" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1a62a9cc5d048c853dc3f2cc4fead5da1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_spi_initialize_hardware</definition>
        <argsstring>(const cowpi_display_module_protocol_t *configuration, bit_order_t bit_order)</argsstring>
        <name>cowpi_spi_initialize_hardware</name>
        <param>
          <type>const <ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref> *</type>
          <declname>configuration</declname>
        </param>
        <param>
          <type><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref></type>
          <declname>bit_order</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize()</ref> that supports <ref refid="spi_8h_1afaa9beac52b99f1477a49458313a13c2" kindref="member">cowpi_spi_transmit_hardware()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the pins used for SPI </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_order</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether the peripheral expects the byte to arrive LSB first or MSB first </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="91" column="6" bodyfile="src/communication/spi.c" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1afaa9beac52b99f1477a49458313a13c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_spi_transmit_hardware</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>cowpi_spi_transmit_hardware</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit()</ref> that uses the microcontroller&apos;s hardware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="95" column="6" bodyfile="src/communication/spi.c" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="spi_8c_1a2ea9536533eaeef45a2744d5f882eebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_spi_finalize_hardware</definition>
        <argsstring>(void)</argsstring>
        <name>cowpi_spi_finalize_hardware</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize()</ref> that supports <ref refid="spi_8h_1a62a9cc5d048c853dc3f2cc4fead5da1e" kindref="member">cowpi_spi_initialize_hardware()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/spi.c" line="99" column="6" bodyfile="src/communication/spi.c" bodystart="99" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware-based and software-based implementations of the SPI protocol.   </para>
    </briefdescription>
    <detaileddescription>
<para>By default, a software (bit-banged) implementation will be used. When an implementation that uses the microcontroller&apos;s hardware is available, it can be used instead by re-assigning the <ref refid="communication_8h_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize()</ref>, <ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit()</ref>, and <ref refid="communication_8h_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize()</ref> function pointers.</para>
<para>The provided implementations are for peripheral-in/controller-out mode.   </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi_stdio<sp/>(c)<sp/>2022-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spi_8h" kindref="compound">spi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>data_pin;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>clock_pin;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref><sp/>data_order;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">void<sp/>(*<ref refid="spi_8c_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref><sp/>bit_order)<sp/>=<sp/><ref refid="spi_8c_1a6ca4b938a71a8321954f5ac045f96970" kindref="member">cowpi_spi_initialize_bitbang</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">void<sp/>(*<ref refid="spi_8c_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit</ref>)(uint8_t<sp/>byte)<sp/>=<sp/><ref refid="spi_8c_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">void<sp/>(*<ref refid="spi_8c_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize</ref>)(void)<sp/>=<sp/><ref refid="spi_8c_1ad25b0e5a844b8af779e3db3261b8f35f" kindref="member">cowpi_spi_finalize_bitbang</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a487a89c904390ee413a7f74b05a446c1" kindref="member">cowpi_use_spi_bitbang</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize</ref><sp/>=<sp/><ref refid="spi_8c_1a6ca4b938a71a8321954f5ac045f96970" kindref="member">cowpi_spi_initialize_bitbang</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit</ref><sp/>=<sp/><ref refid="spi_8c_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize</ref><sp/>=<sp/><ref refid="spi_8c_1ad25b0e5a844b8af779e3db3261b8f35f" kindref="member">cowpi_spi_finalize_bitbang</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a6ca4b938a71a8321954f5ac045f96970" kindref="member">cowpi_spi_initialize_bitbang</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration,<sp/><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref><sp/>bit_order)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>data_pin<sp/>=<sp/>configuration-&gt;data_pin;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_pin<sp/>=<sp/>configuration-&gt;clock_pin;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>data_order<sp/>=<sp/>bit_order;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>shiftOut(data_pin,<sp/>clock_pin,<sp/>data_order<sp/>==<sp/>COWPI_MSB_FIRST<sp/>?<sp/>MSBFIRST<sp/>:<sp/>LSBFIRST,<sp/>byte);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1ad25b0e5a844b8af779e3db3261b8f35f" kindref="member">cowpi_spi_finalize_bitbang</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/>;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR_ATmega328P__)<sp/>||<sp/>defined<sp/>(__AVR_ATmega2560__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a9ccea4bfedcd66e54c74366845193553" kindref="member">cowpi_use_spi_hardware</ref>()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1ae56ad6594960d7d4ee6ef6041c200e0a" kindref="member">cowpi_spi_initialize</ref><sp/>=<sp/><ref refid="spi_8c_1a62a9cc5d048c853dc3f2cc4fead5da1e" kindref="member">cowpi_spi_initialize_hardware</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit</ref><sp/>=<sp/><ref refid="spi_8c_1afaa9beac52b99f1477a49458313a13c2" kindref="member">cowpi_spi_transmit_hardware</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a50fed624317382ee7f85dd4e50a9d533" kindref="member">cowpi_spi_finalize</ref><sp/>=<sp/><ref refid="spi_8c_1a2ea9536533eaeef45a2744d5f882eebc" kindref="member">cowpi_spi_finalize_hardware</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a62a9cc5d048c853dc3f2cc4fead5da1e" kindref="member">cowpi_spi_initialize_hardware</ref>(__attribute__((unused))<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref><sp/>bit_order)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bit_order_bit<sp/>=<sp/>((bit_order<sp/>==<sp/>COWPI_LSB_FIRST)<sp/>&lt;&lt;<sp/>DORD);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>SPI,<sp/>data<sp/>order,<sp/>Controller,<sp/>set<sp/>clock<sp/>rate<sp/>fck/16<sp/>[1MHz]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>SPCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>SPE)<sp/>|<sp/>bit_order_bit<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>MSTR)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>SPR0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1afaa9beac52b99f1477a49458313a13c2" kindref="member">cowpi_spi_transmit_hardware</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>SPDR<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(SPSR<sp/>&amp;<sp/>0x80))<sp/>{}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a2ea9536533eaeef45a2744d5f882eebc" kindref="member">cowpi_spi_finalize_hardware</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>SPCR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a9ccea4bfedcd66e54c74366845193553" kindref="member">cowpi_use_spi_hardware</ref>()<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a487a89c904390ee413a7f74b05a446c1" kindref="member">cowpi_use_spi_bitbang</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a62a9cc5d048c853dc3f2cc4fead5da1e" kindref="member">cowpi_spi_initialize_hardware</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration,<sp/><ref refid="communication_8h_1a97eceed51859eb3e90fc20be1809e60c" kindref="member">bit_order_t</ref><sp/>bit_order)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a6ca4b938a71a8321954f5ac045f96970" kindref="member">cowpi_spi_initialize_bitbang</ref>(configuration,<sp/>bit_order);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1afaa9beac52b99f1477a49458313a13c2" kindref="member">cowpi_spi_transmit_hardware</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1a4a5da23ff494753ca31c403a8d2cf323" kindref="member">cowpi_spi_transmit_bitbang</ref>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spi_8c_1a2ea9536533eaeef45a2744d5f882eebc" kindref="member">cowpi_spi_finalize_hardware</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spi_8c_1ad25b0e5a844b8af779e3db3261b8f35f" kindref="member">cowpi_spi_finalize_bitbang</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//architecture</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/communication/spi.c"/>
  </compounddef>
</doxygen>
