<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="i2c_8c" kind="file" language="C++">
    <compoundname>i2c.c</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="i2c_8h" local="yes">i2c.h</includes>
    <includes refid="translations_8h" local="yes">../translations/translations.h</includes>
    <incdepgraph>
      <node id="5">
        <label>communication.h</label>
        <link refid="communication_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/communication/i2c.c</label>
        <link refid="i2c_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../translations/translations.h</label>
        <link refid="translations_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>../typedefs.h</label>
        <link refid="typedefs_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Arduino.h</label>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="i2c_8c_1a4d3438214f4a23bce2edfd953fc7bc4d" prot="public" static="no">
        <name>WRITE_LOW</name>
        <param><defname>pin</defname></param>
        <initializer>do { <ref refid="translations_8cpp_1a17c91c645a4fa0112a0b3ea8b7ef4ece" kindref="member">cowpi_pin_mode</ref>((pin), OUTPUT); } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="39" column="9" bodyfile="src/communication/i2c.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="i2c_8c_1a6e9627fd85a6bcfae27040b50c0d0d92" prot="public" static="no">
        <name>WRITE_HIGH</name>
        <param><defname>pin</defname></param>
        <initializer>do { <ref refid="translations_8cpp_1a17c91c645a4fa0112a0b3ea8b7ef4ece" kindref="member">cowpi_pin_mode</ref>((pin), INPUT);  } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="40" column="9" bodyfile="src/communication/i2c.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="i2c_8c_1a0ca8b37572124ad1df6ae619feaa6305" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t data_pin</definition>
        <argsstring></argsstring>
        <name>data_pin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="29" column="16" bodyfile="src/communication/i2c.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1a77229b3e891eeeabe5b4e83cf3cb31f6" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t clock_pin</definition>
        <argsstring></argsstring>
        <name>clock_pin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="30" column="16" bodyfile="src/communication/i2c.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1aeef6d2fe8b4808a69f38dce46a33e86f" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* cowpi_i2c_initialize) (const cowpi_display_module_protocol_t *configuration)</definition>
        <argsstring>)(const cowpi_display_module_protocol_t *configuration)</argsstring>
        <name>cowpi_i2c_initialize</name>
        <initializer>= <ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref></initializer>
        <briefdescription>
<para>Function pointer for function that takes care of any setup needed before using I2C to send data to a display module. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes, but might not be limited to, transmitting the start bit and the peripheral&apos;s address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the microcontroller pins, adapter mapping, and possibly i2c peripheral address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise</para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="32" column="1" bodyfile="src/communication/i2c.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1a37c852a914e0488ebb1f909815aeed76" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* cowpi_i2c_transmit) (uint8_t byte)</definition>
        <argsstring>)(uint8_t byte)</argsstring>
        <name>cowpi_i2c_transmit</name>
        <initializer>= <ref refid="i2c_8c_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref></initializer>
        <briefdescription>
<para>Function pointer for function that uses SPI to send data to a display module. </para>
        </briefdescription>
        <detaileddescription>
<para>This might be a pre-defined implementation that uses the microcontroller&apos;s SPI hardware, or it might be a pre-defined bit-bang implementation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise</para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="34" column="1" bodyfile="src/communication/i2c.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1a2b869486af06844eedb843fd5c0c6deb" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* cowpi_i2c_finalize) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>cowpi_i2c_finalize</name>
        <initializer>= <ref refid="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref></initializer>
        <briefdescription>
<para>Function pointer for function that takes care of any teardown needed after using SPI to send data to a display module. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes, but might not be limited to, transmitting the stop bit.</para>
<para><simplesect kind="see"><para><ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="communication_8h_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="36" column="1" bodyfile="src/communication/i2c.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="i2c_8c_1ad87e18447a141b8e0b9b08889babc74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_use_i2c_bitbang</definition>
        <argsstring>()</argsstring>
        <name>cowpi_use_i2c_bitbang</name>
        <briefdescription>
<para>Assigns to <computeroutput>cowpi_i2c_initialize</computeroutput>, <computeroutput>cowpi_i2c_transmit</computeroutput>, and <computeroutput>cowpi_i2c_finalize</computeroutput> pure software (&quot;bit-banged&quot;) implementations that do not use the microcontroller&apos;s built-in I2C hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>Bit-banged implementations have no restrictions on the choice of data and clock pins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="42" column="6" bodyfile="src/communication/i2c.c" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_initialize_bitbang</definition>
        <argsstring>(const cowpi_display_module_protocol_t *configuration)</argsstring>
        <name>cowpi_i2c_initialize_bitbang</name>
        <param>
          <type>const <ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref> *</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize()</ref> that supports <ref refid="i2c_8h_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the microcontroller pins, adapter mapping, and possibly i2c peripheral address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="48" column="6" bodyfile="src/communication/i2c.c" bodystart="48" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a0919d8883527981ba813ea2159b5699c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_transmit_bitbang</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>cowpi_i2c_transmit_bitbang</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>A bit-banged implementation of <ref refid="communication_8h_1a8081d2ae373c4f3f0ef9883716d7b5ba" kindref="member">cowpi_spi_transmit()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="66" column="6" bodyfile="src/communication/i2c.c" bodystart="66" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_i2c_finalize_bitbang</definition>
        <argsstring>(void)</argsstring>
        <name>cowpi_i2c_finalize_bitbang</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize()</ref> that supports <ref refid="i2c_8h_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="97" column="6" bodyfile="src/communication/i2c.c" bodystart="97" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1ad9b5f556b020528ad090295534b45b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_use_i2c_hardware</definition>
        <argsstring>()</argsstring>
        <name>cowpi_use_i2c_hardware</name>
        <briefdescription>
<para>Assigns to <computeroutput>cowpi_i2c_initialize</computeroutput>, <computeroutput>cowpi_i2c_transmit</computeroutput>, and <computeroutput>cowpi_i2c_finalize</computeroutput> implementations that use the microcontroller&apos;s built-in I2C (aka IIC, aka TWI) hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>Using the I2C hardware may limit the choice of data and clock pins. Attempting to use the I2C hardware while specifying pins that cannot be used by the I2C hardware may result in unexpected behavior.</para>
<para>The CowPi_stdio library does not have I2C hardware implementations for all microcontrollers. If a hardware implementation is unavailable, this function will return <computeroutput>false</computeroutput> and will assign a bit-banged implementation instead.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if hardware implementations have been assigned to the CowPi&apos;s I2C function pointers </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if hardware implementations have not been assigned to the CowPi&apos;s I2C function pointers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="157" column="6" bodyfile="src/communication/i2c.c" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1ad8aa166aa700f8f0d52be6eea9b176e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_initialize_hardware</definition>
        <argsstring>(const cowpi_display_module_protocol_t *configuration)</argsstring>
        <name>cowpi_i2c_initialize_hardware</name>
        <param>
          <type>const <ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref> *</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize()</ref> that supports <ref refid="i2c_8h_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the microcontroller pins, adapter mapping, and possibly i2c peripheral address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="162" column="6" bodyfile="src/communication/i2c.c" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a392256e05988efb8ad36e043c1ffb1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cowpi_i2c_transmit_hardware</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>cowpi_i2c_transmit_hardware</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit()</ref> that uses the microcontroller&apos;s hardware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to be transmitted to the peripheral </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if ACK received; <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="166" column="6" bodyfile="src/communication/i2c.c" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a82d5ee7a140c7fac38a6a4becc363b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_i2c_finalize_hardware</definition>
        <argsstring>(void)</argsstring>
        <name>cowpi_i2c_finalize_hardware</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>An implementation of <ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize()</ref> that supports <ref refid="i2c_8h_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="170" column="6" bodyfile="src/communication/i2c.c" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a7269ef3039db09b417f685643b8e1eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t cowpi_discover_i2c_address</definition>
        <argsstring>(uint8_t i2c_data_pin, uint8_t i2c_clock_pin)</argsstring>
        <name>cowpi_discover_i2c_address</name>
        <param>
          <type>uint8_t</type>
          <declname>i2c_data_pin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>i2c_clock_pin</declname>
        </param>
        <briefdescription>
<para>Reports the address of the I2C peripheral if there is exactly one I2C peripheral attached to the designated pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2c_data_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C serial data pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2c_clock_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C serial clock pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem>
<para>0 if no I2C peripherals are detected </para>
</listitem>
<listitem>
<para>-1 if multiple I2C peripherals are detected </para>
</listitem>
<listitem>
<para>the peripheral&apos;s I2C address otherwise </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/communication/i2c.c" line="177" column="8" bodyfile="src/communication/i2c.c" bodystart="177" bodyend="200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware-based and software-based implementations of the I2C protocol.   </para>
    </briefdescription>
    <detaileddescription>
<para>By default, a software (bit-banged) implementation will be used. When an implementation that uses the microcontroller&apos;s hardware is available, it can be used instead by re-assigning the <ref refid="communication_8h_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize()</ref>, <ref refid="communication_8h_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit()</ref>, and <ref refid="communication_8h_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize()</ref> function pointers.</para>
<para>The provided implementations are for peripheral-in/controller-out mode.   </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi_stdio<sp/>(c)<sp/>2022-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="i2c_8h" kindref="compound">i2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../translations/translations.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>data_pin;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>clock_pin;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">bool<sp/>(*<ref refid="i2c_8c_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration)<sp/>=<sp/><ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">bool<sp/>(*<ref refid="i2c_8c_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit</ref>)(uint8_t<sp/>byte)<sp/>=<sp/><ref refid="i2c_8c_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">void<sp/>(*<ref refid="i2c_8c_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize</ref>)(void)<sp/>=<sp/><ref refid="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WRITE_LOW(pin)<sp/><sp/>do<sp/>{<sp/>cowpi_pin_mode((pin),<sp/>OUTPUT);<sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WRITE_HIGH(pin)<sp/>do<sp/>{<sp/>cowpi_pin_mode((pin),<sp/>INPUT);<sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1ad87e18447a141b8e0b9b08889babc74f" kindref="member">cowpi_use_i2c_bitbang</ref>()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize</ref><sp/>=<sp/><ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit</ref><sp/>=<sp/><ref refid="i2c_8c_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize</ref><sp/>=<sp/><ref refid="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>data_pin<sp/>=<sp/>configuration-&gt;data_pin;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_pin<sp/>=<sp/>configuration-&gt;clock_pin;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hold<sp/>bus<sp/>&quot;free&quot;<sp/>for<sp/>4.7us<sp/>(t_buf)<sp/>between<sp/>stop<sp/>and<sp/>start<sp/>(almost<sp/>certainly<sp/>redundant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_HIGH(data_pin);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_HIGH(clock_pin);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(5);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_LOW(data_pin);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(data_pin,<sp/>LOW);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>time,<sp/>just<sp/>to<sp/>be<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(5);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.3us<sp/>t_icf<sp/>+<sp/>4us<sp/>t_sth<sp/>(start<sp/>hold)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_LOW(clock_pin);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(clock_pin,<sp/>LOW);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>time,<sp/>just<sp/>to<sp/>be<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I2C<sp/>address<sp/>+<sp/>/w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref>(configuration-&gt;i2c_address<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>16MHz<sp/>ATMega328P,<sp/>`shiftOut`<sp/>should<sp/>give<sp/>us<sp/>77-91MHz<sp/>clock,<sp/>might<sp/>be<sp/>too<sp/>fast<sp/>for<sp/>I2C<sp/>in<sp/>practice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Probably<sp/>same<sp/>(but<sp/>maybe<sp/>faster)<sp/>on<sp/>Arduino<sp/>Nano<sp/>Every.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>definitely<sp/>be<sp/>too<sp/>fast<sp/>on<sp/>Arduino&apos;s<sp/>ARM-based<sp/>devices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delayMicroseconds(4);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4.7us<sp/>t_scl,<sp/>minus<sp/>the<sp/>1us<sp/>we&apos;re<sp/>going<sp/>to<sp/>delay<sp/>for<sp/>t_sds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>(7<sp/>-<sp/>i))<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WRITE_HIGH(data_pin);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WRITE_LOW(data_pin);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delayMicroseconds(2);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1us<sp/>t_icr<sp/>+<sp/>250ns<sp/>t_sds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WRITE_HIGH(clock_pin);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delayMicroseconds(6);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1us<sp/>t_icr<sp/>+<sp/>4us<sp/>t_sch<sp/>+<sp/>0.3us<sp/>t_icf<sp/>+<sp/>0ns<sp/>t_sdh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WRITE_LOW(clock_pin);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pinMode(data_pin,<sp/>INPUT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="translations_8cpp_1a17c91c645a4fa0112a0b3ea8b7ef4ece" kindref="member">cowpi_pin_mode</ref>(data_pin,<sp/>INPUT);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(6);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_HIGH(clock_pin);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(3);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>nack<sp/>=<sp/>digitalRead(data_pin);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(3);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_LOW(clock_pin);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pinMode(data_pin,<sp/>OUTPUT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="translations_8cpp_1a17c91c645a4fa0112a0b3ea8b7ef4ece" kindref="member">cowpi_pin_mode</ref>(data_pin,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_LOW(data_pin);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!nack;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_LOW(data_pin);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>already<sp/>be<sp/>low<sp/>from<sp/>ack<sp/>bit,<sp/>but<sp/>just<sp/>to<sp/>be<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_LOW(clock_pin);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>already<sp/>be<sp/>low,<sp/>but<sp/>just<sp/>to<sp/>be<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(5);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5us<sp/>t_sch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_HIGH(clock_pin);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(5);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1us<sp/>t_icr<sp/>+<sp/>4us<sp/>t_sps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>WRITE_HIGH(data_pin);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR_ATmega328P__)<sp/>||<sp/>defined<sp/>(__AVR_ATmega2560__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1ad9b5f556b020528ad090295534b45b0c" kindref="member">cowpi_use_i2c_hardware</ref>()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1aeef6d2fe8b4808a69f38dce46a33e86f" kindref="member">cowpi_i2c_initialize</ref><sp/>=<sp/><ref refid="i2c_8c_1ad8aa166aa700f8f0d52be6eea9b176e8" kindref="member">cowpi_i2c_initialize_hardware</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a37c852a914e0488ebb1f909815aeed76" kindref="member">cowpi_i2c_transmit</ref><sp/>=<sp/><ref refid="i2c_8c_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a2b869486af06844eedb843fd5c0c6deb" kindref="member">cowpi_i2c_finalize</ref><sp/>=<sp/><ref refid="i2c_8c_1a82d5ee7a140c7fac38a6a4becc363b96" kindref="member">cowpi_i2c_finalize_hardware</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1ad8aa166aa700f8f0d52be6eea9b176e8" kindref="member">cowpi_i2c_initialize_hardware</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>SCL<sp/>Frequency<sp/>[100kHz]<sp/>=<sp/>CPU<sp/>Clock<sp/>Frequency<sp/>[16MHz]<sp/>/<sp/>(16<sp/>+<sp/>2<sp/>*<sp/>TWBR<sp/>*<sp/>prescaler<sp/>[1])<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWBR<sp/>=<sp/>72;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWSR<sp/>&amp;=<sp/>~((1<sp/>&lt;&lt;<sp/>TWPS1)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWPS0));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>won&apos;t<sp/>rely<sp/>on<sp/>interrupts<sp/>since<sp/>students<sp/>will<sp/>work<sp/>with<sp/>display<sp/>before<sp/>knowing<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We&apos;re<sp/>also<sp/>not<sp/>going<sp/>to<sp/>enable<sp/>acknowledgements:<sp/>the<sp/>basic<sp/>labs<sp/>will<sp/>only<sp/>use</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>controller-transmitter<sp/>mode,<sp/>and<sp/>without<sp/>interrupts<sp/>we<sp/>can&apos;t<sp/>honor<sp/>the<sp/>ACK<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>So<sp/>we&apos;ll<sp/>just<sp/>enable<sp/>TWI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>TWEN)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWEA);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>TWCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWEN)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWSTA);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(TWCR<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)))<sp/>{}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>((TWSR<sp/>&amp;<sp/>0xF8)<sp/>!=<sp/>0x08)<sp/>cowpi_error(&quot;Controller<sp/>did<sp/>not<sp/>send<sp/>I2C<sp/>start!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I2C<sp/>address<sp/>+<sp/>/w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>TWDR<sp/>=<sp/>configuration-&gt;i2c_address<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>TWCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWEN);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(TWCR<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)))<sp/>{}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>((TWSR<sp/>&amp;<sp/>0xF8)<sp/>!=<sp/>0x18)<sp/>cowpi_error(&quot;I2C<sp/>peripheral<sp/>did<sp/>not<sp/>receive<sp/>address!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((TWSR<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0x18);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>TWDR<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>TWCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWEN);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(TWCR<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)))<sp/>{}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>((TWSR<sp/>&amp;<sp/>0xF8)!=<sp/>0x28)<sp/>cowpi_error(&quot;I2C<sp/>peripheral<sp/>did<sp/>not<sp/>receive<sp/>byte!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((TWSR<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0x28);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a82d5ee7a140c7fac38a6a4becc363b96" kindref="member">cowpi_i2c_finalize_hardware</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>TWCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>TWINT)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWEN)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWSTO);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1ad9b5f556b020528ad090295534b45b0c" kindref="member">cowpi_use_i2c_hardware</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1ad87e18447a141b8e0b9b08889babc74f" kindref="member">cowpi_use_i2c_bitbang</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1ad8aa166aa700f8f0d52be6eea9b176e8" kindref="member">cowpi_i2c_initialize_hardware</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>*configuration)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>(configuration);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a392256e05988efb8ad36e043c1ffb1ec" kindref="member">cowpi_i2c_transmit_hardware</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a0919d8883527981ba813ea2159b5699c" kindref="member">cowpi_i2c_transmit_bitbang</ref>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a82d5ee7a140c7fac38a6a4becc363b96" kindref="member">cowpi_i2c_finalize_hardware</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//architecture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">int8_t<sp/><ref refid="i2c_8c_1a7269ef3039db09b417f685643b8e1eae" kindref="member">cowpi_discover_i2c_address</ref>(uint8_t<sp/>i2c_data_pin,<sp/>uint8_t<sp/>i2c_clock_pin)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>discovered_address<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>number_of_discovered_addresses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref><sp/>detail<sp/>=<sp/>(<ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_pin<sp/>=<sp/>i2c_data_pin,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.clock_pin<sp/>=<sp/>i2c_clock_pin,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_address<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>(&amp;detail);<sp/><sp/></highlight><highlight class="comment">//<sp/>clear-out<sp/>an<sp/>ACK<sp/>that<sp/>might<sp/>be<sp/>lingering<sp/>on<sp/>the<sp/>line<sp/>after<sp/>a<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int8_t<sp/>address<sp/>=<sp/>1;<sp/>address<sp/>&gt;<sp/>0;<sp/>address++)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail<sp/>=<sp/>(<ref refid="structcowpi__display__module__protocol__t" kindref="compound">cowpi_display_module_protocol_t</ref>)<sp/>{.data_pin=SDA,<sp/>.clock_pin=SCL,<sp/>.i2c_address<sp/>=<sp/>address};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ack<sp/>=<sp/><ref refid="i2c_8c_1a6bf11c5a94e8e9e73e5913d58c7262e8" kindref="member">cowpi_i2c_initialize_bitbang</ref>(&amp;detail);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a98c4937fe7c6a2081736ff0a8419c511" kindref="member">cowpi_i2c_finalize_bitbang</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ack)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discovered_address<sp/>=<sp/>(int8_t)<sp/>(discovered_address<sp/>?<sp/>-1<sp/>:<sp/>address);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_discovered_addresses++;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_of_discovered_addresses<sp/>==<sp/>127)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>happens,<sp/>then<sp/>we&apos;re<sp/>likely<sp/>missing<sp/>the<sp/>pull-up<sp/>resistors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>discovered_address;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/communication/i2c.c"/>
  </compounddef>
</doxygen>
