<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="cowpi__interrupts_8h" kind="file" language="C++">
    <compoundname>cowpi_interrupts.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_cow_pi_8h" local="yes">src/CowPi.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/cowpi_interrupts.h</label>
        <link refid="cowpi__interrupts_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/CowPi.h</label>
        <link refid="_cow_pi_8h"/>
      </node>
      <node id="1">
        <label>src/cowpi_interrupts.h</label>
        <link refid="cowpi__interrupts_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cowpi__interrupts_8h_1a4c10d158fba5c165c4a15c1a4082dccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_register_pin_ISR</definition>
        <argsstring>(uint32_t interrupt_mask, void(*isr)(void))</argsstring>
        <name>cowpi_register_pin_ISR</name>
        <param>
          <type>uint32_t</type>
          <declname>interrupt_mask</declname>
        </param>
        <param>
          <type>void(*)(void)</type>
          <declname>isr</declname>
        </param>
        <briefdescription>
<para>Registers a function to service pin-based interrupts triggered by logic-level changes on one or more pins. </para>
        </briefdescription>
        <detaileddescription>
<para>The registered function will be invoked whenever there is a low-to-high or a high-to-low change. If behavior is only required for a rising edge or for a falling edge, or if the behavior for rising and falling edges must differ, then the function should have a conditional to determine the direction of the change.</para>
<para>If the change is generated by a mechanical device, then the function is responsible for debouncing if there is not a hardware debouncing circuit.</para>
<para>The <computeroutput>interrupt_mask</computeroutput> argument is used to specify which pins will be serviced by the registered function. Bit0 corresponds to Pin 0, Bit1 corresponds to Pin 1, and so on. A 1 in a particular bit indicates that the function is to be registered for changes on the corresponding pin. If more than one bit has a 1, then the function will be registered for each of the corresponding pins. If there previously was a function registered to handle changes on a specified pin, then the new function will replace the old function. A bit with a 0 signifies nothing more than that the function is not being registered to service changes on that pin at this time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interrupt_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit vector specifying which pins will be serviced by the registered ISR </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isr</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that will service interrupts triggered by changes on the specified pins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_interrupts.h" line="69" column="6" declfile="src/cowpi_interrupts.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cowpi__interrupts_8h_1af34ff96988b97b72914d6d5949c1347e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cowpi_deregister_pin_ISR</definition>
        <argsstring>(uint32_t interrupt_mask)</argsstring>
        <name>cowpi_deregister_pin_ISR</name>
        <param>
          <type>uint32_t</type>
          <declname>interrupt_mask</declname>
        </param>
        <briefdescription>
<para>De-registers the servicing function, if any, for the specified pin(s). </para>
        </briefdescription>
        <detaileddescription>
<para>After this function terminates, a logic-level change on the specified pin(s) will no longer be serviced custom function. It is possible that an interrupt would still fire for changes on the pin; if so, it will be serviced by a default, empty function.</para>
<para>The <computeroutput>interrupt_mask</computeroutput> argument is used to specify which pins will no longer be serviced by a custom function. Bit0 corresponds to Pin 0, Bit1 corresponds to Pin 1, and so on. A 1 in a particular bit indicates that the pin&apos;s ISR is to be deregistered. If more than one bit has a 1, then the ISRs for each of the pins will be deregistered. A bit with a 0 signifies nothing more than that no deregistration actions are to be take for that pin at this time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interrupt_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit vector specifying which pins will no longer be serviced by an ISR </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_interrupts.h" line="90" column="6" declfile="src/cowpi_interrupts.h" declline="90" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to register/deregister interrupt handlers for pin-based interrupts. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Christopher A. Bohn</para>
</simplesect>
</para>
<para>Provides functions to register and deregister functions to handle to interrupts that are fired due to changes on the microcontroller&apos;s pins. A function specific to each pin (or combination of pins) can be registered. There is no option for only-rising or only-falling interrupt handlers; the same function must service all changes on the pin(s) that it is registered to service. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi<sp/>(c)<sp/>2021-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COWPI_INTERRUPTS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_INTERRUPTS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="cowpi__interrupts_8h_1a4c10d158fba5c165c4a15c1a4082dccf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cowpi__interrupts_8h_1a4c10d158fba5c165c4a15c1a4082dccf" kindref="member">cowpi_register_pin_ISR</ref>(uint32_t<sp/>interrupt_mask,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*isr)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="cowpi__interrupts_8h_1af34ff96988b97b72914d6d5949c1347e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cowpi__interrupts_8h_1af34ff96988b97b72914d6d5949c1347e" kindref="member">cowpi_deregister_pin_ISR</ref>(uint32_t<sp/>interrupt_mask);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//COWPI_INTERRUPTS_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/cowpi_interrupts.h"/>
  </compounddef>
</doxygen>
