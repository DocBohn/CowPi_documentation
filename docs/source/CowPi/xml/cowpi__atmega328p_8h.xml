<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="cowpi__atmega328p_8h" kind="file" language="C++">
    <compoundname>cowpi_atmega328p.h</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes local="no">avr/pgmspace.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="cowpi__setup_8h" local="yes">cowpi_setup.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/cowpi_atmega328p.h</label>
        <link refid="cowpi__atmega328p_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cowpi_setup.h</label>
        <link refid="cowpi__setup_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Arduino.h</label>
      </node>
      <node id="3">
        <label>avr/pgmspace.h</label>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcowpi__ioport__t" prot="public">cowpi_ioport_t</innerclass>
    <innerclass refid="structcowpi__spi__t" prot="public">cowpi_spi_t</innerclass>
    <innerclass refid="structcowpi__i2c__t" prot="public">cowpi_i2c_t</innerclass>
    <innerclass refid="structcowpi__pininterrupt__t" prot="public">cowpi_pininterrupt_t</innerclass>
    <innerclass refid="structcowpi__timer8bit__t" prot="public">cowpi_timer8bit_t</innerclass>
    <innerclass refid="structcowpi__timer16bit__t" prot="public">cowpi_timer16bit_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a5823f1dd82a685f0009d84a9c0f040e4" prot="public" static="no">
        <name>COWPI_IO_BASE</name>
        <initializer>((uint8_t *) 0x20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The memory address corresponding to the start of the memory-mapped I/O registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="57" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1ac5f05a8b0c7f66ffb7e11a8ef1de1bd8" prot="public" static="no">
        <name>cowpi_spi_enable</name>
        <initializer>    do {                                                                           \
    /* Enable <ref refid="cowpi__setup_8h_1aadd93900fc87105fa3ef514675d4133b" kindref="member">SPI</ref>, Controller, set clock rate fck/16 [1MHz] */                                          \
    SPCR = <ref refid="cowpi__setup_8h_1a5948b4f7773a35155eb9b6df025bf547" kindref="member">cowpi_is_spi_lsbfirst</ref>()  ? (1 &lt;&lt; SPE) | (1 &lt;&lt; DORD) | (1 &lt;&lt; MSTR) | (1 &lt;&lt; SPR0)              \
                                    : (1 &lt;&lt; SPE) |               (1 &lt;&lt; MSTR) | (1 &lt;&lt; SPR0);             \
    /* By repeating myself, both constants will be generated at compile time */                         \
} while(0)</initializer>
        <briefdescription>
<para>Enables the SPI hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the bitrate at 1 MHz, and configures the hardware not to generate interrupts and to transmit MSB-first or LSB-first, depending on the display module and dialect.</para>
<para>This macro should be invoked only immediately before using the SPI hardware because:</para>
<para><simplesect kind="attention"><para>Enabling SPI hardware automatically configures COPI pin and SCK pin as output, the CIPO pin as input, and will cause the SPI hardware to assume there is another controller if a low input is received on the CS pin, (if the CS pin is set for inputs) causing it to stop transmitting on COPI.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="cowpi__atmega328p_8h_1a3dae5b8d357c0640d6adda7c06de9055" kindref="member">cowpi_spi_disable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="77" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a3dae5b8d357c0640d6adda7c06de9055" prot="public" static="no">
        <name>cowpi_spi_disable</name>
        <initializer>    do {                                                                          \
    SPCR = 0;                                                                                           \
} while(0)</initializer>
        <briefdescription>
<para>Disables the SPI hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro should be invoked immediately after using the SPI hardware to restore the program-defined (or library-defined) pin directions and to desensitize the SPI hardware to inputs on the CS pin (if the CS pin is set for inputs).</para>
<para><simplesect kind="see"><para><ref refid="cowpi__atmega328p_8h_1ac5f05a8b0c7f66ffb7e11a8ef1de1bd8" kindref="member">cowpi_spi_enable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="94" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1ab314b08101f23be49724fabd6ccc82ec" prot="public" static="no">
        <name>cowpi_initialize_i2c</name>
        <initializer>    do {                                                                       \
    /* Set SCL Frequency [100kHz] = CPU Clock Frequency [16MHz] / (16 + 2 * TWBR * prescaler [1]) */    \
    TWBR = 72;                                                                                          \
    TWSR &amp;= ~((1 &lt;&lt; TWPS1) | (1 &lt;&lt; TWPS0));                                                             \
    /* We won&apos;t rely on interrupts since students will work with display before knowing interrupts. */  \
    /* We&apos;re also not going to enable acknowledgements: the basic labs will only use                    \
     * controller-transmitter mode, and without interrupts we can&apos;t honor the ACK anyway. */            \
    /* So we&apos;ll just enable <ref refid="cowpi__setup_8h_1a82dd285d848c7aa4c9ee6ae8910c5e89" kindref="member">TWI</ref> */                                                                      \
    TWCR = (1 &lt;&lt; TWEN) | (1 &lt;&lt; TWEA);                                                                   \
} while(0)</initializer>
        <briefdescription>
<para>Configures and enables the TWI hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the bitrate at 100 kHz and configures the hardware not to generate interrupts.</para>
<para>Application should not need to invoke this macro, as it is invoked during setup; however, there is no harm in doing so. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="107" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a80f5eee679a4948d1caecea85c6515bb" prot="public" static="no">
        <name>COWPI_PB</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Index for arrays to access PINB/DDRB/PORTB and PCMSK0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="118" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a0fd4cd62abe44571c15f402d1be53d38" prot="public" static="no">
        <name>D8_D13</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Alias of COWPI_PB corresponding to pins D8-D13 on the Arduino Uno &amp; Arduino Nano. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="119" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1aec0de6e12ee1b9a7fa3bb65df3fbf896" prot="public" static="no">
        <name>COWPI_PC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Index for arrays to access PINC/DDRC/PORTC / PCMSK1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="120" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a78160d9b3e934f1a07df8c9260a37bf9" prot="public" static="no">
        <name>A0_A5</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Alias of COWPI_PC for corresponding to pins D14-D19 (A0-A5) on the Arduino Uno &amp; Arduino Nano. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="121" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a1ffd8cc06300926e158e437c6653080c" prot="public" static="no">
        <name>D14_D19</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Alias of COWPI_PC for corresponding to pins D14-D19 (A0-A5) on the Arduino Uno &amp; Arduino Nano. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="122" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1aa649adce5fd071e0fd625e532cfc90d3" prot="public" static="no">
        <name>A0_A7</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Alias of COWPI_PC for corresponding to pins D14-D19 (A0-A5) on the Arduino Uno &amp; Arduino Nano. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="123" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1aae183590b947c6c97c820b576f0f7305" prot="public" static="no">
        <name>D14_D21</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Alias of COWPI_PC for corresponding to pins D14-D19 (A0-A5) on the Arduino Uno &amp; Arduino Nano. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="124" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a9a09abef1c55986f63c495c2ba97dac5" prot="public" static="no">
        <name>COWPI_PD</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Index for arrays to access PIND/DDRD/PORTD and PCMSK2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="125" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cowpi__atmega328p_8h_1a151bafe798a20a204a1c68c2a82a85c3" prot="public" static="no">
        <name>D0_D7</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Alias of COWPI_PD for corresponding to pins D0-D7 on the Arduino Uno &amp; Arduino Nano. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cowpi_atmega328p.h" line="126" column="9" bodyfile="src/cowpi_atmega328p.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Macros and constants for the ATmega328P microcontroller (Arduino Uno, Arduino Nano) </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Christopher A. Bohn</para>
</simplesect>
</para>
<para>This header provides the base address for memory-mapped I/O and data structures to conveniently access the I/O registers.</para>
<para>Possibly-useful memory-mapped registers: <table rows="12" cols="3"><row>
<entry thead="yes" align='center'><para>Use   </para>
</entry><entry thead="yes" align='left'><para>Datatype   </para>
</entry><entry thead="yes" align='left'><para>Offset from <computeroutput>COWPI_IO_BASE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>External pins   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__ioport__t" kindref="compound">cowpi_ioport_t</ref>[3]   </para>
</entry><entry thead="no" align='left'><para>0x03 (index with named constants)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Pin-based interrupts   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__pininterrupt__t" kindref="compound">cowpi_pininterrupt_t</ref>   </para>
</entry><entry thead="no" align='left'><para>0x1B    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>SPI protocol   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__spi__t" kindref="compound">cowpi_spi_t</ref>   </para>
</entry><entry thead="no" align='left'><para>0x2C    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>I2C protocol   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__i2c__t" kindref="compound">cowpi_i2c_t</ref>   </para>
</entry><entry thead="no" align='left'><para>0x98    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Timer0   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__timer8bit__t" kindref="compound">cowpi_timer8bit_t</ref>   </para>
</entry><entry thead="no" align='left'><para>0x24    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Timer1   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__timer16bit__t" kindref="compound">cowpi_timer16bit_t</ref>   </para>
</entry><entry thead="no" align='left'><para>0x60    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Timer2   </para>
</entry><entry thead="no" align='left'><para><ref refid="structcowpi__timer8bit__t" kindref="compound">cowpi_timer8bit_t</ref>   </para>
</entry><entry thead="no" align='left'><para>0x90    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Timer interrupt masks (TIMSKx)   </para>
</entry><entry thead="no" align='left'><para>uint8_t[3]   </para>
</entry><entry thead="no" align='left'><para>0x4E (index with timer number)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Timer interrupt flags (TIFRx)   </para>
</entry><entry thead="no" align='left'><para>uint8_t[3]   </para>
</entry><entry thead="no" align='left'><para>0x35 (index with timer number)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>General timer/counter control register (GTCCR)   </para>
</entry><entry thead="no" align='left'><para>uint8_t   </para>
</entry><entry thead="no" align='left'><para>0x23    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Asynchronous Status Register (ASSR)   </para>
</entry><entry thead="no" align='left'><para>uint8_t   </para>
</entry><entry thead="no" align='left'><para>0x96   </para>
</entry></row>
</table>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CowPi<sp/>(c)<sp/>2021-23<sp/>Christopher<sp/>A.<sp/>Bohn</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COWPI_ATMEGA328P_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_ATMEGA328P_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/pgmspace.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cowpi__setup_8h" kindref="compound">cowpi_setup.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="cowpi__atmega328p_8h_1a5823f1dd82a685f0009d84a9c0f040e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_IO_BASE<sp/><sp/><sp/>((uint8_t<sp/>*)<sp/>0x20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="cowpi__atmega328p_8h_1ac5f05a8b0c7f66ffb7e11a8ef1de1bd8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cowpi_spi_enable<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>SPI,<sp/>Controller,<sp/>set<sp/>clock<sp/>rate<sp/>fck/16<sp/>[1MHz]<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SPCR<sp/>=<sp/>cowpi_is_spi_lsbfirst()<sp/><sp/>?<sp/>(1<sp/>&lt;&lt;<sp/>SPE)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>DORD)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>MSTR)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>SPR0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(1<sp/>&lt;&lt;<sp/>SPE)<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>MSTR)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>SPR0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>By<sp/>repeating<sp/>myself,<sp/>both<sp/>constants<sp/>will<sp/>be<sp/>generated<sp/>at<sp/>compile<sp/>time<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="cowpi__atmega328p_8h_1a3dae5b8d357c0640d6adda7c06de9055" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cowpi_spi_disable<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SPCR<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="cowpi__atmega328p_8h_1ab314b08101f23be49724fabd6ccc82ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cowpi_initialize_i2c<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>SCL<sp/>Frequency<sp/>[100kHz]<sp/>=<sp/>CPU<sp/>Clock<sp/>Frequency<sp/>[16MHz]<sp/>/<sp/>(16<sp/>+<sp/>2<sp/>*<sp/>TWBR<sp/>*<sp/>prescaler<sp/>[1])<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TWBR<sp/>=<sp/>72;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TWSR<sp/>&amp;=<sp/>~((1<sp/>&lt;&lt;<sp/>TWPS1)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWPS0));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>won&apos;t<sp/>rely<sp/>on<sp/>interrupts<sp/>since<sp/>students<sp/>will<sp/>work<sp/>with<sp/>display<sp/>before<sp/>knowing<sp/>interrupts.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We&apos;re<sp/>also<sp/>not<sp/>going<sp/>to<sp/>enable<sp/>acknowledgements:<sp/>the<sp/>basic<sp/>labs<sp/>will<sp/>only<sp/>use<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>controller-transmitter<sp/>mode,<sp/>and<sp/>without<sp/>interrupts<sp/>we<sp/>can&apos;t<sp/>honor<sp/>the<sp/>ACK<sp/>anyway.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>So<sp/>we&apos;ll<sp/>just<sp/>enable<sp/>TWI<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TWCR<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>TWEN)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TWEA);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="cowpi__atmega328p_8h_1a80f5eee679a4948d1caecea85c6515bb" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="cowpi__atmega328p_8h_1a0fd4cd62abe44571c15f402d1be53d38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_PB<sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="cowpi__atmega328p_8h_1aec0de6e12ee1b9a7fa3bb65df3fbf896" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D8_D13<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="cowpi__atmega328p_8h_1a78160d9b3e934f1a07df8c9260a37bf9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_PC<sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="cowpi__atmega328p_8h_1a1ffd8cc06300926e158e437c6653080c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>A0_A5<sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="cowpi__atmega328p_8h_1aa649adce5fd071e0fd625e532cfc90d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D14_D19<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="cowpi__atmega328p_8h_1aae183590b947c6c97c820b576f0f7305" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>A0_A7<sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="cowpi__atmega328p_8h_1a9a09abef1c55986f63c495c2ba97dac5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D14_D21<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="cowpi__atmega328p_8h_1a151bafe798a20a204a1c68c2a82a85c3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COWPI_PD<sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D0_D7<sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structcowpi__ioport__t_1a50dd6867d88f56234ea891814236ea21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136" refid="structcowpi__ioport__t_1a9fad4ed334233388bbe481f7f73c25ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>input;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="structcowpi__ioport__t_1aebd761330e6ebd35517e60a59cc14c26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>direction;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>output;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><ref refid="structcowpi__ioport__t" kindref="compound">cowpi_ioport_t</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structcowpi__spi__t_1a5caac6daba1dc1d2a7b19d1dad4a42c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145" refid="structcowpi__spi__t_1ad7abff7717e610838d6da93fbad8d7f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>control;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146" refid="structcowpi__spi__t_1a6d168653c02ecd68f89e9d2cddecc0c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>status;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/><ref refid="structcowpi__spi__t" kindref="compound">cowpi_spi_t</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structcowpi__i2c__t_1aa03bc58e5a9449476804ac094985e6d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154" refid="structcowpi__i2c__t_1a473d3d291c13cf015f30eab3f7eebdf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bit_rate;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="structcowpi__i2c__t_1aa299d89166f3c13867e0e3fe9928b8b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>status;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156" refid="structcowpi__i2c__t_1a171f63ff332968bc7a57e5970b3495a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>address;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157" refid="structcowpi__i2c__t_1adcdf390ea097e06107a61572b6bca65a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158" refid="structcowpi__i2c__t_1a5acfa1812d1b49bbe7fc75e3ffd65ed1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>control;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>peripheral_address_mask;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}<sp/><ref refid="structcowpi__i2c__t" kindref="compound">cowpi_i2c_t</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="structcowpi__pininterrupt__t_1ae08e48d3e5028282b0a96f91d93593c1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="166" refid="structcowpi__pininterrupt__t_1a96a3385644120e743b8ada8d7e8edf97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>pci_flags;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167" refid="structcowpi__pininterrupt__t_1a7747d4a0c6a0abf8a5b9e88e25a859d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ei_flags;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168" refid="structcowpi__pininterrupt__t_1a7a28c6d8a6d5dec3c2cae780c8a50f0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ei_mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169" refid="structcowpi__pininterrupt__t_1a443b22b16fff1ea8069eed24eae0941b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>DO_NOT_TOUCH[0x2A];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170" refid="structcowpi__pininterrupt__t_1a2d090d1a28c71a53a5b6c8828130d72d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>pci_control;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171" refid="structcowpi__pininterrupt__t_1a5193fbe9abb3a21307a00b28b248b2b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ei_control;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172" refid="structcowpi__pininterrupt__t_1ae3199073cd21783dfaf60e35a3c025ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>:8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>pci_mask[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/><ref refid="structcowpi__pininterrupt__t" kindref="compound">cowpi_pininterrupt_t</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="structcowpi__timer8bit__t_1a2d3b9213a48c7c5ec9e0a08423195506" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185" refid="structcowpi__timer8bit__t_1ac06d078336f823a4c9c9a35486a5a586" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>control;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186" refid="structcowpi__timer8bit__t_1a507dfad0b639165332141cdcc89365ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>counter;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187" refid="structcowpi__timer8bit__t_1aec16287da5b5a2faffc3a5b69ca5b04b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>compareA;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>compareB;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal">}<sp/><ref refid="structcowpi__timer8bit__t" kindref="compound">cowpi_timer8bit_t</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="structcowpi__timer16bit__t_1ae939b1eb2d41faef4b3edd78e771b7be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199" refid="structcowpi__timer16bit__t_1a2cdaf58009898499b65e07caca197041" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>control;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200" refid="structcowpi__timer16bit__t_1ae7b02e439caada6bb18bf5c0be76dbb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>counter;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201" refid="structcowpi__timer16bit__t_1aa733ca07095b7212226dc61c3bc98fbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>capture;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202" refid="structcowpi__timer16bit__t_1a2da739bf8b51c8a4bb01df247c4f7cf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>compareA;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>compareB;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/><ref refid="structcowpi__timer16bit__t" kindref="compound">cowpi_timer16bit_t</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//COWPI_ATMEGA328P_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/cowpi_atmega328p.h"/>
  </compounddef>
</doxygen>
